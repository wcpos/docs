"use strict";(self.webpackChunkwcpos=self.webpackChunkwcpos||[]).push([[1816],{3905:(e,n,o)=>{o.d(n,{Zo:()=>l,kt:()=>d});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function s(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function a(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var g=t.createContext({}),p=function(e){var n=t.useContext(g),o=n;return e&&(o="function"==typeof e?e(n):s(s({},n),e)),o},l=function(e){var n=p(e.components);return t.createElement(g.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),c=p(o),d=r,m=c["".concat(g,".").concat(d)]||c[d]||u[d]||i;return o?t.createElement(m,s(s({ref:n},l),{},{components:o})):t.createElement(m,s({ref:n},l))}));function d(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=o.length,s=new Array(i);s[0]=c;var a={};for(var g in n)hasOwnProperty.call(n,g)&&(a[g]=n[g]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var p=2;p<i;p++)s[p]=o[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,o)}c.displayName="MDXCreateElement"},620:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>g,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var t=o(3117),r=(o(7294),o(3905));const i={title:"Debugging",description:"If debugging is enabled, WooCommerce POS will log various messages to the console which may assist in diagnosing problems."},s=void 0,a={unversionedId:"support/debugging",id:"version-0.4.x/support/debugging",title:"Debugging",description:"If debugging is enabled, WooCommerce POS will log various messages to the console which may assist in diagnosing problems.",source:"@site/versioned_docs/version-0.4.x/support/debugging.mdx",sourceDirName:"support",slug:"/support/debugging",permalink:"/0.4.x/support/debugging",draft:!1,editUrl:"https://github.com/wcpos/docs/edit/main/versioned_docs/version-0.4.x/support/debugging.mdx",tags:[],version:"0.4.x",frontMatter:{title:"Debugging",description:"If debugging is enabled, WooCommerce POS will log various messages to the console which may assist in diagnosing problems."},sidebar:"mySidebar",previous:{title:"POS Performance",permalink:"/0.4.x/support/pos-performance"},next:{title:"Security",permalink:"/0.4.x/support/security"}},g={},p=[{value:"Turn on debugging using wp-config.php",id:"turn-on-debugging-using-wp-configphp",level:3},{value:"Turn on debugging using the browser console",id:"turn-on-debugging-using-the-browser-console",level:3}],l={toc:p};function u(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},l,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"This article is intended for web developers, debugging is not something the average user should need to use.")),(0,r.kt)("p",null,"WooCommerce POS is largely a JavaScript web application - and as such - most debugging is done through the ",(0,r.kt)("a",{parentName:"p",href:"http://codex.wordpress.org/Using_Your_Browser_to_Diagnose_JavaScript_Errors"},"browser console"),".\nIf debugging is enabled, WooCommerce POS will log various messages to the console which may assist in diagnosing problems."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://wcpos.com/wp-content/uploads/2016/06/javascript-console.png",alt:"An open JavaScript Console in Chrome for the Mac",title:"An open JavaScript Console in Chrome for the Mac"})),(0,r.kt)("h3",{id:"turn-on-debugging-using-wp-configphp"},"Turn on debugging using wp-config.php"),(0,r.kt)("p",null,"By setting the ",(0,r.kt)("a",{parentName:"p",href:"https://codex.wordpress.org/Debugging_in_WordPress#SCRIPT_DEBUG"},"SCRIPT_DEBUG")," flag in your wp-config.php file, you can enable WooCommerce POS debugging.\nThis will load the unminified script files and also enable debug messages in the browser console."),(0,r.kt)("h3",{id:"turn-on-debugging-using-the-browser-console"},"Turn on debugging using the browser console"),(0,r.kt)("p",null,"If you do not have access to the wp-config.php file, you can enable debug messages by adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," flag to the Local Storage.\nThis can be done by entering ",(0,r.kt)("inlineCode",{parentName:"p"},"localStorage.setItem('debug', '*')")," into the console.\nNow refresh the page and debugging will be on. Console logging can consume browser resources so you'll probably want to turn debugging off once you are finished with it.\nTo turn debugging off, simply enter ",(0,r.kt)("inlineCode",{parentName:"p"},"localStorage.removeItem('debug')")," into the console and refresh the page."))}u.isMDXComponent=!0}}]);